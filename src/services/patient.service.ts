/**
 * Service pour les patients
 * Contient toute la logique m√©tier pour g√©rer les patients
 */

import { PatientRepository } from '../repositories/patient.repository';
import { validatePatientData } from '../shared/utils/validation';
import type { Patient, TypePatient, Sexe, GroupeSanguin } from '../shared/types/patient';
import type { ID } from '../shared/types/common';

/**
 * Service Patient
 */
export class PatientService {
  private repository: PatientRepository;

  constructor() {
    this.repository = new PatientRepository();
  }

  /**
   * R√©cup√®re tous les patients
   * @returns Array de tous les patients
   */
  async getAllPatients(): Promise<Patient[]> {
    return this.repository.findAll();
  }

  /**
   * R√©cup√®re un patient par son ID
   * @param id - ID du patient
   * @returns Le patient
   * @throws Error si le patient n'existe pas
   */
  async getPatientById(id: ID): Promise<Patient> {
    const patient = await this.repository.findById(id);
    if (!patient) {
      throw new Error(`Patient avec l'ID ${id} non trouv√©`);
    }
    return patient;
  }

  /**
   * R√©cup√®re plusieurs patients par leurs IDs
   * @param ids - Array d'IDs
   * @returns Array de patients
   */
  async getPatientsByIds(ids: ID[]): Promise<Patient[]> {
    return this.repository.findByIds(ids);
  }

  /**
   * R√©cup√®re les patients par type
   * @param type - Type de patient
   * @returns Array de patients du type demand√©
   */
  async getPatientsByType(type: TypePatient): Promise<Patient[]> {
    return this.repository.findByType(type);
  }

  /**
   * Recherche de patients avec filtres
   * @param filters - Crit√®res de recherche
   * @returns Array de patients correspondants
   */
  async searchPatients(filters: {
    search?: string;
    sexe?: Sexe;
    type?: TypePatient;
    groupeSanguin?: GroupeSanguin;
  }): Promise<Patient[]> {
    return this.repository.findByFilters(filters);
  }

  /**
   * Cr√©e un nouveau patient
   * @param patientData - Donn√©es du patient
   * @returns Le patient cr√©√©
   * @throws Error si validation √©choue ou CIN existe d√©j√†
   */
  async createPatient(patientData: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>): Promise<Patient> {
    // Validation des donn√©es
    const errors = validatePatientData(patientData);
    if (errors.length > 0) {
      throw new Error(`Validation √©chou√©e: ${errors.join(', ')}`);
    }

    // V√©rifier que le CIN n'existe pas d√©j√†
    const cinExists = await this.repository.existsByCin(patientData.cin);
    if (cinExists) {
      throw new Error(`Un patient avec le CIN ${patientData.cin} existe d√©j√†`);
    }

    // Cr√©er le patient
    return this.repository.create(patientData);
  }

  /**
   * Met √† jour un patient
   * @param id - ID du patient
   * @param patientData - Donn√©es √† mettre √† jour
   * @returns Le patient mis √† jour
   * @throws Error si le patient n'existe pas ou validation √©choue
   */
  async updatePatient(id: ID, patientData: Partial<Patient>): Promise<Patient> {
    // V√©rifier que le patient existe
    const existingPatient = await this.repository.findById(id);
    if (!existingPatient) {
      throw new Error(`Patient avec l'ID ${id} non trouv√©`);
    }

    // Si le CIN change, v√©rifier qu'il n'existe pas d√©j√†
    if (patientData.cin && patientData.cin !== existingPatient.cin) {
      const cinExists = await this.repository.existsByCin(patientData.cin, id);
      if (cinExists) {
        throw new Error(`Un patient avec le CIN ${patientData.cin} existe d√©j√†`);
      }
    }

    // Mettre √† jour
    const updatedPatient = await this.repository.update(id, patientData);
    if (!updatedPatient) {
      throw new Error(`√âchec de la mise √† jour du patient ${id}`);
    }

    return updatedPatient;
  }

  /**
   * Supprime un patient
   * @param id - ID du patient
   * @throws Error si le patient n'existe pas
   */
async deletePatient(id: ID): Promise<void> {
  console.log(`üóëÔ∏è PATIENT SERVICE - Suppression du patient ${id}`);
  
  try {
    const deleted = await this.repository.delete(id);
    if (!deleted) {
      throw new Error(`Patient avec l'ID ${id} non trouv√©`);
    }
    console.log(`‚úÖ PATIENT SERVICE - Patient ${id} supprim√© avec succ√®s`);
  } catch (error) {
    console.error(`‚ùå PATIENT SERVICE - Erreur suppression patient ${id}:`, error);
    throw error;
  }
}


  /**
   * R√©cup√®re les statistiques des patients
   * @returns Statistiques (total, par type)
   */
  async getStatistics(): Promise<{
    total: number;
    permanent: number;
    vacancier: number;
    finTraitement: number;
  }> {
    const allPatients = await this.repository.findAll();
    
    return {
      total: allPatients.length,
      permanent: allPatients.filter(p => p.type_patient === 'Permanent').length,
      vacancier: allPatients.filter(p => p.type_patient === 'Vacancier').length,
      finTraitement: allPatients.filter(p => p.type_patient === 'Fin Traitement').length,
    };
  }

}
